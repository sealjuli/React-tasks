const UseMemoPage = () => {
  return (
    <div className="outlet text">
      <h2>useMemo</h2>
      <p>
        {`React хук useMemo предназначен для мемоизации вычислений в функциональных компонентах.
        Он позволяет сохранять результат вычислений и повторно использовать его, если входные значения
        (зависимости) не изменились. Это может существенно повысить производительность, особенно в случаях,
        когда сложные вычисления выполняются при каждом рендеринге компонента.`}
      </p>

      <p>{`Например, вычисление производительной функции:`}</p>

      <pre className="code">
        <code>
          {`import React, { useMemo } from 'react';

const MyComponent = ({ data }) => {
  const processedData = useMemo(() => {
    // Вычисления, требующие много времени или ресурсов
    // Например, фильтрация или сортировка массива данных
    return processData(data);
  }, [data]); // Зависимость - значение пропса "data"

  return (
    <div>
      {processedData}
    </div>
  );
};`}
        </code>
      </pre>

      <p>{`В этом примере результат вычисления processData будет сохраняться и пересчитываться только
      при изменении значения пропса data. При последующих рендерах, если data не изменилось, будет использован сохраненный результат.`}</p>
    </div>
  );
};

export default UseMemoPage;
