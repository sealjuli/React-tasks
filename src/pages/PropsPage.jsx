const PropsPage = () => {
  return (
    <div className="outlet text">
      <h2>Props</h2>
      <p>
        {`Пропсы (сокращение от properties) - это данные, которые передаются в компоненты React для настройки
          их поведения и внешнего вида. Они позволяют передавать информацию из родительского компонента в дочерний компонент.
          Дочерний компонент может читать эти props и использовать их, например, для вывода данных на экран или для изменения
          своего поведения.`}
      </p>

      <p>{`Пропсы передаются в компоненты в виде атрибутов при их использовании в JSX. Например, <ChildComponent message="Привет, Redev!" /> передает пропс message со значением "Привет, Redev!" в компонент ChildComponent.`}</p>

      <pre className="code">
        <code>
          {`// Родительский компонент
const ParentComponent = () => {
  const message = "Привет, Redev!";
  return <ChildComponent message={message} />;
}

// Дочерний компонент
const ChildComponent = (props) => {
  return <div>{props.message}</div>;
}`}
        </code>
      </pre>

      <p>
        {
          "В функциональных компонентах пропсы доступны как параметр функции компонента. Например, (props) => {...}. "
        }
      </p>
      <pre className="code">
        <code>
          {`// Родительский компонент
const ParentComponent = () => {
  const message = "Привет, Redev!";
  return <ChildComponent message={message} />;
}

// Дочерний компонент
const ChildComponent = (props) => {
  return <div>{props.message}</div>;
}

// либо сразу сделать деструктуризацию, ведь props это обычный объект
const ChildComponent = ({message}) => {
  return <div>{message}</div>;
}`}
        </code>
      </pre>

      <p>
        {`Props можно использовать для передачи любых данных, включая строки, числа, массивы, объекты и функции.
        Пропсы являются неизменяемыми (immutable), их нельзя изменять напрямую.
        this.props.name = "Vasya" то есть вот так изменить пропс name НЕЛЬЗЯ!
        Однако, можно использовать состояние компонента (state) для изменения пропсов.
        Пропсы в React играют важную роль в передаче данных и настройке компонентов. Они позволяют создавать
        переиспользуемые компоненты. Правильное использование пропсов способствует лучшей организации кода и
        разделению ответственности между компонентами.`}
      </p>
    </div>
  );
};

export default PropsPage;
